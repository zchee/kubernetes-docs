.TH "KUBERNETES" "1" " kubernetes User Manuals" "Eric Paris" "Jan 2015"  ""


.SH NAME
.PP
kubectl create configmap \- Create a configmap from a local file, directory or literal value


.SH SYNOPSIS
.PP
\fBkubectl create configmap\fP [OPTIONS]


.SH DESCRIPTION
.PP
Create a configmap based on a file, directory, or specified literal value.

.PP
A single configmap may package one or more key/value pairs.

.PP
When creating a configmap based on a file, the key will default to the basename of the file, and the value will default to the file content.  If the basename is an invalid key, you may specify an alternate key.

.PP
When creating a configmap based on a directory, each file whose basename is a valid key in the directory will be packaged into the configmap.  Any directory entries except regular files are ignored (e.g. subdirectories, symlinks, devices, pipes, etc).


.SH OPTIONS
.PP
\fB\-\-allow\-missing\-template\-keys\fP=true
    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.

.PP
\fB\-\-append\-hash\fP=false
    Append a hash of the configmap to its name.

.PP
\fB\-\-dry\-run\fP=false
    If true, only print the object that would be sent, without sending it.

.PP
\fB\-\-from\-env\-file\fP=""
    Specify the path to a file to read lines of key=val pairs to create a configmap (i.e. a Docker .env file).

.PP
\fB\-\-from\-file\fP=[]
    Key file can be specified using its file path, in which case file basename will be used as configmap key, or optionally with a key and file path, in which case the given key will be used.  Specifying a directory will iterate each named file in the directory whose basename is a valid configmap key.

.PP
\fB\-\-from\-literal\fP=[]
    Specify a key and literal value to insert in configmap (i.e. mykey=somevalue)

.PP
\fB\-\-generator\fP="configmap/v1"
    The name of the API generator to use.

.PP
\fB\-o\fP, \fB\-\-output\fP=""
    Output format. One of: json|yaml|wide|name|custom\-columns=...|custom\-columns\-file=...|go\-template=...|go\-template\-file=...|jsonpath=...|jsonpath\-file=... See custom columns [
\[la]http://kubernetes.io/docs/user-guide/kubectl-overview/#custom-columns\[ra]], golang template [
\[la]http://golang.org/pkg/text/template/#pkg-overview\[ra]] and jsonpath template [
\[la]http://kubernetes.io/docs/user-guide/jsonpath\[ra]].

.PP
\fB\-\-save\-config\fP=false
    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.

.PP
\fB\-\-template\fP=""
    Template string or path to template file to use when \-o=go\-template, \-o=go\-template\-file. The template format is golang templates [
\[la]http://golang.org/pkg/text/template/#pkg-overview\[ra]].

.PP
\fB\-\-validate\fP=true
    If true, use a schema to validate the input before sending it


.SH OPTIONS INHERITED FROM PARENT COMMANDS
.PP
\fB\-\-allow\-verification\-with\-non\-compliant\-keys\fP=false
    Allow a SignatureVerifier to use keys which are technically non\-compliant with RFC6962.

.PP
\fB\-\-alsologtostderr\fP=false
    log to standard error as well as files

.PP
\fB\-\-as\fP=""
    Username to impersonate for the operation

.PP
\fB\-\-as\-group\fP=[]
    Group to impersonate for the operation, this flag can be repeated to specify multiple groups.

.PP
\fB\-\-azure\-container\-registry\-config\fP=""
    Path to the file containing Azure container registry configuration information.

.PP
\fB\-\-cache\-dir\fP="/Users/zchee/.kube/http\-cache"
    Default HTTP cache directory

.PP
\fB\-\-certificate\-authority\fP=""
    Path to a cert file for the certificate authority

.PP
\fB\-\-client\-certificate\fP=""
    Path to a client certificate file for TLS

.PP
\fB\-\-client\-key\fP=""
    Path to a client key file for TLS

.PP
\fB\-\-cloud\-provider\-gce\-lb\-src\-cidrs\fP=130.211.0.0/22,209.85.152.0/22,209.85.204.0/22,35.191.0.0/16
    CIDRs opened in GCE firewall for LB traffic proxy \& health checks

.PP
\fB\-\-cluster\fP=""
    The name of the kubeconfig cluster to use

.PP
\fB\-\-context\fP=""
    The name of the kubeconfig context to use

.PP
\fB\-\-default\-not\-ready\-toleration\-seconds\fP=300
    Indicates the tolerationSeconds of the toleration for notReady:NoExecute that is added by default to every pod that does not already have such a toleration.

.PP
\fB\-\-default\-unreachable\-toleration\-seconds\fP=300
    Indicates the tolerationSeconds of the toleration for unreachable:NoExecute that is added by default to every pod that does not already have such a toleration.

.PP
\fB\-\-google\-json\-key\fP=""
    The Google Cloud Platform Service Account JSON Key to use for authentication.

.PP
\fB\-\-insecure\-skip\-tls\-verify\fP=false
    If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure

.PP
\fB\-\-kubeconfig\fP=""
    Path to the kubeconfig file to use for CLI requests.

.PP
\fB\-\-log\-backtrace\-at\fP=:0
    when logging hits line file:N, emit a stack trace

.PP
\fB\-\-log\-dir\fP=""
    If non\-empty, write log files in this directory

.PP
\fB\-\-log\-flush\-frequency\fP=5s
    Maximum number of seconds between log flushes

.PP
\fB\-\-logtostderr\fP=true
    log to standard error instead of files

.PP
\fB\-\-match\-server\-version\fP=false
    Require server version to match client version

.PP
\fB\-n\fP, \fB\-\-namespace\fP=""
    If present, the namespace scope for this CLI request

.PP
\fB\-\-request\-timeout\fP="0"
    The length of time to wait before giving up on a single server request. Non\-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.

.PP
\fB\-s\fP, \fB\-\-server\fP=""
    The address and port of the Kubernetes API server

.PP
\fB\-\-stderrthreshold\fP=2
    logs at or above this threshold go to stderr

.PP
\fB\-\-token\fP=""
    Bearer token for authentication to the API server

.PP
\fB\-\-user\fP=""
    The name of the kubeconfig user to use

.PP
\fB\-v\fP, \fB\-\-v\fP=0
    log level for V logs

.PP
\fB\-\-version\fP=false
    Print version information and quit

.PP
\fB\-\-vmodule\fP=
    comma\-separated list of pattern=N settings for file\-filtered logging


.SH EXAMPLE
.PP
.RS

.nf
  # Create a new configmap named my\-config based on folder bar
  kubectl create configmap my\-config \-\-from\-file=path/to/bar
  
  # Create a new configmap named my\-config with specified keys instead of file basenames on disk
  kubectl create configmap my\-config \-\-from\-file=key1=/path/to/bar/file1.txt \-\-from\-file=key2=/path/to/bar/file2.txt
  
  # Create a new configmap named my\-config with key1=config1 and key2=config2
  kubectl create configmap my\-config \-\-from\-literal=key1=config1 \-\-from\-literal=key2=config2
  
  # Create a new configmap named my\-config from the key=value pairs in the file
  kubectl create configmap my\-config \-\-from\-file=path/to/bar
  
  # Create a new configmap named my\-config from an env file
  kubectl create configmap my\-config \-\-from\-env\-file=path/to/bar.env

.fi
.RE


.SH SEE ALSO
.PP
\fBkubectl\-create(1)\fP,


.SH HISTORY
.PP
January 2015, Originally compiled by Eric Paris (eparis at redhat dot com) based on the kubernetes source material, but hopefully they have been automatically generated since!
